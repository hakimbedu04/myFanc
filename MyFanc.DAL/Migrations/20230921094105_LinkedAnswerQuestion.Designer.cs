// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyFanc.DAL;

#nullable disable

namespace MyFanc.DAL.Migrations
{
    [DbContext(typeof(MyFancDbContext))]
    [Migration("20230921094105_LinkedAnswerQuestion")]
    partial class LinkedAnswerQuestion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnswersLabelsTranslations", b =>
                {
                    b.Property<int>("AnswersLabelsId")
                        .HasColumnType("int");

                    b.Property<int>("LabelsId")
                        .HasColumnType("int");

                    b.HasKey("AnswersLabelsId", "LabelsId");

                    b.HasIndex("LabelsId");

                    b.ToTable("AnswersLabelsTranslations");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LatestUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestUpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LinkedQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LinkedQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstQuestion")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LatestUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestUpdateUserId")
                        .HasColumnType("int");

                    b.Property<int>("WizardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WizardId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.QuestionBreadcrumb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionBreadcrumb");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.QuestionBreadcrumbItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreadcrumbId")
                        .HasColumnType("int");

                    b.Property<bool>("IsALoop")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreadcrumbId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionBreadcrumbItem");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCSAMUser")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LatestConnection")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LatestSynchronization")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LatestUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestUpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.Wizard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleterUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LatestUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestUpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Wizards");
                });

            modelBuilder.Entity("QuestionsTextsTranslations", b =>
                {
                    b.Property<int>("QuestionsTextsId")
                        .HasColumnType("int");

                    b.Property<int>("TextsId")
                        .HasColumnType("int");

                    b.HasKey("QuestionsTextsId", "TextsId");

                    b.HasIndex("TextsId");

                    b.ToTable("QuestionsTextsTranslations");
                });

            modelBuilder.Entity("QuestionsTitlesTranslations", b =>
                {
                    b.Property<int>("QuestionsTitlesId")
                        .HasColumnType("int");

                    b.Property<int>("TitlesId")
                        .HasColumnType("int");

                    b.HasKey("QuestionsTitlesId", "TitlesId");

                    b.HasIndex("TitlesId");

                    b.ToTable("QuestionsTitlesTranslations");
                });

            modelBuilder.Entity("TranslationWizard", b =>
                {
                    b.Property<int>("IntroductionTextsId")
                        .HasColumnType("int");

                    b.Property<int>("WizardsTextsId")
                        .HasColumnType("int");

                    b.HasKey("IntroductionTextsId", "WizardsTextsId");

                    b.HasIndex("WizardsTextsId");

                    b.ToTable("TranslationWizard");
                });

            modelBuilder.Entity("WizardTitlesTranslations", b =>
                {
                    b.Property<int>("TitlesId")
                        .HasColumnType("int");

                    b.Property<int>("WizardsTitlesId")
                        .HasColumnType("int");

                    b.HasKey("TitlesId", "WizardsTitlesId");

                    b.HasIndex("WizardsTitlesId");

                    b.ToTable("WizardTitlesTranslations");
                });

            modelBuilder.Entity("AnswersLabelsTranslations", b =>
                {
                    b.HasOne("MyFanc.BusinessObjects.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswersLabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFanc.BusinessObjects.Translation", null)
                        .WithMany()
                        .HasForeignKey("LabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.Answer", b =>
                {
                    b.HasOne("MyFanc.BusinessObjects.Question", "LinkedQuestion")
                        .WithMany("LinkedAnswer")
                        .HasForeignKey("LinkedQuestionId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("MyFanc.BusinessObjects.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedQuestion");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.Question", b =>
                {
                    b.HasOne("MyFanc.BusinessObjects.Wizard", "Wizard")
                        .WithMany("Questions")
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.QuestionBreadcrumb", b =>
                {
                    b.HasOne("MyFanc.BusinessObjects.Question", "Question")
                        .WithMany("Breadcrumbs")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.QuestionBreadcrumbItem", b =>
                {
                    b.HasOne("MyFanc.BusinessObjects.QuestionBreadcrumb", "Breadcrumb")
                        .WithMany("Items")
                        .HasForeignKey("BreadcrumbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFanc.BusinessObjects.Question", "Question")
                        .WithMany("BreadcrumbsItems")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Breadcrumb");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionsTextsTranslations", b =>
                {
                    b.HasOne("MyFanc.BusinessObjects.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsTextsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFanc.BusinessObjects.Translation", null)
                        .WithMany()
                        .HasForeignKey("TextsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionsTitlesTranslations", b =>
                {
                    b.HasOne("MyFanc.BusinessObjects.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsTitlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFanc.BusinessObjects.Translation", null)
                        .WithMany()
                        .HasForeignKey("TitlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TranslationWizard", b =>
                {
                    b.HasOne("MyFanc.BusinessObjects.Translation", null)
                        .WithMany()
                        .HasForeignKey("IntroductionTextsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFanc.BusinessObjects.Wizard", null)
                        .WithMany()
                        .HasForeignKey("WizardsTextsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WizardTitlesTranslations", b =>
                {
                    b.HasOne("MyFanc.BusinessObjects.Translation", null)
                        .WithMany()
                        .HasForeignKey("TitlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFanc.BusinessObjects.Wizard", null)
                        .WithMany()
                        .HasForeignKey("WizardsTitlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Breadcrumbs");

                    b.Navigation("BreadcrumbsItems");

                    b.Navigation("LinkedAnswer");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.QuestionBreadcrumb", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MyFanc.BusinessObjects.Wizard", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
